CREATE OR REPLACE FUNCTION get_filtered_events_with_cursor(
    _cursor_event_id BIGINT,
    _cursor_time TIMESTAMP,
    _limit INTEGER,
    _title TEXT,
    _category_ids BIGINT[],
    _start_time TIMESTAMP,
    _end_time TIMESTAMP,
    _latitude DOUBLE PRECISION,
    _longitude DOUBLE PRECISION,
    _radius_km DOUBLE PRECISION
)
RETURNS SETOF events
AS
$$
BEGIN
RETURN QUERY
SELECT e.price,
       e.created_at,
       e.created_by_account_id,
       e.currency_id,
       e.end_time,
       e.happening_on_location_id,
       e.id,
       e.start_time,
       e.description,
       e.image_url,
       e.title
FROM events e
-- üïê Cursor-based str√°nkov√°n√≠: vracej ud√°losti po urƒçit√©m ƒçase
WHERE e.start_time >= _cursor_time

  -- ‚ùó Nevracej znovu tu samou ud√°lost, kter√° byla posledn√≠
  AND (_cursor_event_id IS NULL OR e.id != _cursor_event_id)

  -- üîç Filtrace podle n√°zvu (case-insensitive, ƒç√°steƒçn√° shoda)
  --AND (_title IS NULL OR LOWER(e.title) LIKE CONCAT('%', _title, '%'))
  AND (_title IS NULL OR e.title ILIKE CONCAT('%', _title, '%'))

  -- üè∑Ô∏è Filtrace podle kategori√≠ p≈ôes spojovac√≠ tabulku
  AND (
    cardinality(_category_ids) = 0
        OR EXISTS (SELECT 1
                   FROM event_selected_categories esc
                   WHERE esc.event_id = e.id
                     AND esc.category_id = ANY (_category_ids))
    )

  -- üìÜ Filtrace podle data (bez ohledu na ƒças)
  AND (
    _start_time IS NULL
        -- Pokud nen√≠ zadan√Ω end_time ‚Üí v≈°e od dan√©ho dne d√°l
        OR (_end_time IS NULL AND e.start_time::DATE >= _start_time::DATE)
        -- Pokud je zadan√Ω i end_time ‚Üí v≈°e mezi daty (vƒçetnƒõ)
        OR (_end_time IS NOT NULL AND e.start_time::DATE BETWEEN _start_time::DATE AND _end_time::DATE)
    )

  -- Filtrace podle zemƒõpisn√© polohy
  AND (
    -- pokud nen√≠ zad√°na lokace nebo radius, nespou≈°tƒõj filtraci podle polohy
    _latitude IS NULL OR _longitude IS NULL OR _radius_km IS NULL
        OR EXISTS (
        -- hledej lokaci ud√°losti, kter√° le≈æ√≠ v dan√©m okruhu
        SELECT 1
        FROM locations l
        WHERE l.id = e.happening_on_location_id
          -- pou≈æij PostGIS funkci pro v√Ωpoƒçet vzd√°lenosti (v metrech)
          AND ST_DWithin(
                geography(ST_MakePoint(l.longitude, l.latitude)), -- lokace ud√°losti
                geography(ST_MakePoint(_longitude, _latitude)), -- hledan√© m√≠sto
                _radius_km * 1000 -- polomƒõr v metrech
              ))
    )

-- üîΩ V√Ωsledky ≈ôaƒè chronologicky
ORDER BY e.start_time ASC, id ASC
    LIMIT _limit;
END;
$$ LANGUAGE plpgsql;